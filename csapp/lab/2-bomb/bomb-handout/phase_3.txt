   0x0000000000400f43 <+0>:	sub    $0x18,%rsp  #栈指针减24用来存放3个临时变量（看大小决定个数）
   0x0000000000400f47 <+4>:	lea    0xc(%rsp),%rcx  #%rcx=栈指针+12（参数）
   0x0000000000400f4c <+9>:	lea    0x8(%rsp),%rdx  #%rdx=栈指针+8（参数）
   0x0000000000400f51 <+14>:	mov    $0x4025cf,%esi  #某个参数的传递
   0x0000000000400f56 <+19>:	mov    $0x0,%eax  #对返回值赋值0，为sscanf语句做准备
   0x0000000000400f5b <+24>:	callq  0x400bf0 <__isoc99_sscanf@plt>#按格式读入输入
   0x0000000000400f60 <+29>:	cmp    $0x1,%eax    #将返回值与1进行比较
   0x0000000000400f63 <+32>:	jg     0x400f6a <phase_3+39>  #若返回值大于1（说明scanf的参数大于1），jump39
   0x0000000000400f65 <+34>:	callq  0x40143a <explode_bomb>   #否则炸
   0x0000000000400f6a <+39>:	cmpl   $0x7,0x8(%rsp)  #比较第一个数字与7的大小
   0x0000000000400f6f <+44>:	ja     0x400fad <phase_3+106>  #若>7,跳转106，炸；并且是无符号数的比较。
   0x0000000000400f71 <+46>:	mov    0x8(%rsp),%eax    #把第一个数字的值给%eax
   0x0000000000400f75 <+50>:	jmpq   *0x402470(,%rax,8)   #这是属于跳转表的形式，
   0x0000000000400f7c <+57>:	mov    $0xcf,%eax   #以下就是把某一个值放到%eax中在做<+123>的过程，就是switch-case语句
   0x0000000000400f81 <+62>:	jmp    0x400fbe <phase_3+123>  
   0x0000000000400f83 <+64>:	mov    $0x2c3,%eax
   0x0000000000400f88 <+69>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400f8a <+71>:	mov    $0x100,%eax  
   0x0000000000400f8f <+76>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400f91 <+78>:	mov    $0x185,%eax
   0x0000000000400f96 <+83>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400f98 <+85>:	mov    $0xce,%eax
   0x0000000000400f9d <+90>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400f9f <+92>:	mov    $0x2aa,%eax
   0x0000000000400fa4 <+97>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400fa6 <+99>:	mov    $0x147,%eax
   0x0000000000400fab <+104>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400fad <+106>:	callq  0x40143a <explode_bomb>
   0x0000000000400fb2 <+111>:	mov    $0x0,%eax
   0x0000000000400fb7 <+116>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400fb9 <+118>:	mov    $0x137,%eax
   0x0000000000400fbe <+123>:	cmp    0xc(%rsp),%eax #都是在拿rsp+12的地址对应的值与eax进行比较
   0x0000000000400fc2 <+127>:	je     0x400fc9 <phase_3+134>  #若等就会结束，成功；不等，就会炸
   0x0000000000400fc4 <+129>:	callq  0x40143a <explode_bomb>
   0x0000000000400fc9 <+134>:	add    $0x18,%rsp
   0x0000000000400fcd <+138>:	retq
